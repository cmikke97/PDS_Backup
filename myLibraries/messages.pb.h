// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2eproto;
namespace messages {
class ClientMessage;
class ClientMessageDefaultTypeInternal;
extern ClientMessageDefaultTypeInternal _ClientMessage_default_instance_;
class ServerMessage;
class ServerMessageDefaultTypeInternal;
extern ServerMessageDefaultTypeInternal _ServerMessage_default_instance_;
}  // namespace messages
PROTOBUF_NAMESPACE_OPEN
template<> ::messages::ClientMessage* Arena::CreateMaybeMessage<::messages::ClientMessage>(Arena*);
template<> ::messages::ServerMessage* Arena::CreateMaybeMessage<::messages::ServerMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace messages {

enum ClientMessage_Type : int {
  ClientMessage_Type_NOOP = 0,
  ClientMessage_Type_STOR = 1,
  ClientMessage_Type_DELE = 2,
  ClientMessage_Type_MKD = 3,
  ClientMessage_Type_RMD = 4,
  ClientMessage_Type_USER = 5,
  ClientMessage_Type_PASS = 6,
  ClientMessage_Type_QUIT = 7
};
bool ClientMessage_Type_IsValid(int value);
constexpr ClientMessage_Type ClientMessage_Type_Type_MIN = ClientMessage_Type_NOOP;
constexpr ClientMessage_Type ClientMessage_Type_Type_MAX = ClientMessage_Type_QUIT;
constexpr int ClientMessage_Type_Type_ARRAYSIZE = ClientMessage_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientMessage_Type_descriptor();
template<typename T>
inline const std::string& ClientMessage_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientMessage_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientMessage_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ClientMessage_Type_descriptor(), enum_t_value);
}
inline bool ClientMessage_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientMessage_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClientMessage_Type>(
    ClientMessage_Type_descriptor(), name, value);
}
enum ServerMessage_Type : int {
  ServerMessage_Type_NOOP = 0,
  ServerMessage_Type_OK = 1,
  ServerMessage_Type_SEND = 2,
  ServerMessage_Type_ERR = 3,
  ServerMessage_Type_SALT = 4,
  ServerMessage_Type_VER = 5
};
bool ServerMessage_Type_IsValid(int value);
constexpr ServerMessage_Type ServerMessage_Type_Type_MIN = ServerMessage_Type_NOOP;
constexpr ServerMessage_Type ServerMessage_Type_Type_MAX = ServerMessage_Type_VER;
constexpr int ServerMessage_Type_Type_ARRAYSIZE = ServerMessage_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerMessage_Type_descriptor();
template<typename T>
inline const std::string& ServerMessage_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServerMessage_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServerMessage_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ServerMessage_Type_descriptor(), enum_t_value);
}
inline bool ServerMessage_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServerMessage_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServerMessage_Type>(
    ServerMessage_Type_descriptor(), name, value);
}
// ===================================================================

class ClientMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messages.ClientMessage) */ {
 public:
  inline ClientMessage() : ClientMessage(nullptr) {}
  virtual ~ClientMessage();

  ClientMessage(const ClientMessage& from);
  ClientMessage(ClientMessage&& from) noexcept
    : ClientMessage() {
    *this = ::std::move(from);
  }

  inline ClientMessage& operator=(const ClientMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientMessage& operator=(ClientMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientMessage* internal_default_instance() {
    return reinterpret_cast<const ClientMessage*>(
               &_ClientMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClientMessage& a, ClientMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientMessage* New() const final {
    return CreateMaybeMessage<ClientMessage>(nullptr);
  }

  ClientMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientMessage& from);
  void MergeFrom(const ClientMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messages.ClientMessage";
  }
  protected:
  explicit ClientMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ClientMessage_Type Type;
  static constexpr Type NOOP =
    ClientMessage_Type_NOOP;
  static constexpr Type STOR =
    ClientMessage_Type_STOR;
  static constexpr Type DELE =
    ClientMessage_Type_DELE;
  static constexpr Type MKD =
    ClientMessage_Type_MKD;
  static constexpr Type RMD =
    ClientMessage_Type_RMD;
  static constexpr Type USER =
    ClientMessage_Type_USER;
  static constexpr Type PASS =
    ClientMessage_Type_PASS;
  static constexpr Type QUIT =
    ClientMessage_Type_QUIT;
  static inline bool Type_IsValid(int value) {
    return ClientMessage_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    ClientMessage_Type_Type_MIN;
  static constexpr Type Type_MAX =
    ClientMessage_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    ClientMessage_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return ClientMessage_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return ClientMessage_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return ClientMessage_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 3,
    kLastWriteTimeFieldNumber = 5,
    kHashFieldNumber = 6,
    kUsernameFieldNumber = 7,
    kHashedPasswordFieldNumber = 8,
    kVersionFieldNumber = 1,
    kTypeFieldNumber = 2,
    kFileSizeFieldNumber = 4,
  };
  // optional string path = 3;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional string lastWriteTime = 5;
  bool has_lastwritetime() const;
  private:
  bool _internal_has_lastwritetime() const;
  public:
  void clear_lastwritetime();
  const std::string& lastwritetime() const;
  void set_lastwritetime(const std::string& value);
  void set_lastwritetime(std::string&& value);
  void set_lastwritetime(const char* value);
  void set_lastwritetime(const char* value, size_t size);
  std::string* mutable_lastwritetime();
  std::string* release_lastwritetime();
  void set_allocated_lastwritetime(std::string* lastwritetime);
  private:
  const std::string& _internal_lastwritetime() const;
  void _internal_set_lastwritetime(const std::string& value);
  std::string* _internal_mutable_lastwritetime();
  public:

  // optional bytes hash = 6;
  bool has_hash() const;
  private:
  bool _internal_has_hash() const;
  public:
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // optional string username = 7;
  bool has_username() const;
  private:
  bool _internal_has_username() const;
  public:
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // optional bytes hashedPassword = 8;
  bool has_hashedpassword() const;
  private:
  bool _internal_has_hashedpassword() const;
  public:
  void clear_hashedpassword();
  const std::string& hashedpassword() const;
  void set_hashedpassword(const std::string& value);
  void set_hashedpassword(std::string&& value);
  void set_hashedpassword(const char* value);
  void set_hashedpassword(const void* value, size_t size);
  std::string* mutable_hashedpassword();
  std::string* release_hashedpassword();
  void set_allocated_hashedpassword(std::string* hashedpassword);
  private:
  const std::string& _internal_hashedpassword() const;
  void _internal_set_hashedpassword(const std::string& value);
  std::string* _internal_mutable_hashedpassword();
  public:

  // required int32 version = 1;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .messages.ClientMessage.Type type = 2 [default = NOOP];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::messages::ClientMessage_Type type() const;
  void set_type(::messages::ClientMessage_Type value);
  private:
  ::messages::ClientMessage_Type _internal_type() const;
  void _internal_set_type(::messages::ClientMessage_Type value);
  public:

  // optional uint64 fileSize = 4;
  bool has_filesize() const;
  private:
  bool _internal_has_filesize() const;
  public:
  void clear_filesize();
  ::PROTOBUF_NAMESPACE_ID::uint64 filesize() const;
  void set_filesize(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_filesize() const;
  void _internal_set_filesize(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:messages.ClientMessage)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lastwritetime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hashedpassword_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint64 filesize_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class ServerMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messages.ServerMessage) */ {
 public:
  inline ServerMessage() : ServerMessage(nullptr) {}
  virtual ~ServerMessage();

  ServerMessage(const ServerMessage& from);
  ServerMessage(ServerMessage&& from) noexcept
    : ServerMessage() {
    *this = ::std::move(from);
  }

  inline ServerMessage& operator=(const ServerMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerMessage& operator=(ServerMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerMessage* internal_default_instance() {
    return reinterpret_cast<const ServerMessage*>(
               &_ServerMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ServerMessage& a, ServerMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerMessage* New() const final {
    return CreateMaybeMessage<ServerMessage>(nullptr);
  }

  ServerMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerMessage& from);
  void MergeFrom(const ServerMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messages.ServerMessage";
  }
  protected:
  explicit ServerMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ServerMessage_Type Type;
  static constexpr Type NOOP =
    ServerMessage_Type_NOOP;
  static constexpr Type OK =
    ServerMessage_Type_OK;
  static constexpr Type SEND =
    ServerMessage_Type_SEND;
  static constexpr Type ERR =
    ServerMessage_Type_ERR;
  static constexpr Type SALT =
    ServerMessage_Type_SALT;
  static constexpr Type VER =
    ServerMessage_Type_VER;
  static inline bool Type_IsValid(int value) {
    return ServerMessage_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    ServerMessage_Type_Type_MIN;
  static constexpr Type Type_MAX =
    ServerMessage_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    ServerMessage_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return ServerMessage_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return ServerMessage_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return ServerMessage_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSaltFieldNumber = 4,
    kVersionFieldNumber = 1,
    kTypeFieldNumber = 2,
    kErrcodeFieldNumber = 3,
  };
  // optional bytes salt = 4;
  bool has_salt() const;
  private:
  bool _internal_has_salt() const;
  public:
  void clear_salt();
  const std::string& salt() const;
  void set_salt(const std::string& value);
  void set_salt(std::string&& value);
  void set_salt(const char* value);
  void set_salt(const void* value, size_t size);
  std::string* mutable_salt();
  std::string* release_salt();
  void set_allocated_salt(std::string* salt);
  private:
  const std::string& _internal_salt() const;
  void _internal_set_salt(const std::string& value);
  std::string* _internal_mutable_salt();
  public:

  // required int32 version = 1;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .messages.ServerMessage.Type type = 2 [default = NOOP];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::messages::ServerMessage_Type type() const;
  void set_type(::messages::ServerMessage_Type value);
  private:
  ::messages::ServerMessage_Type _internal_type() const;
  void _internal_set_type(::messages::ServerMessage_Type value);
  public:

  // optional int32 errcode = 3;
  bool has_errcode() const;
  private:
  bool _internal_has_errcode() const;
  public:
  void clear_errcode();
  ::PROTOBUF_NAMESPACE_ID::int32 errcode() const;
  void set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_errcode() const;
  void _internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:messages.ServerMessage)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr salt_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 errcode_;
  friend struct ::TableStruct_messages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientMessage

// required int32 version = 1;
inline bool ClientMessage::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ClientMessage::has_version() const {
  return _internal_has_version();
}
inline void ClientMessage::clear_version() {
  version_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientMessage::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientMessage::version() const {
  // @@protoc_insertion_point(field_get:messages.ClientMessage.version)
  return _internal_version();
}
inline void ClientMessage::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  version_ = value;
}
inline void ClientMessage::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:messages.ClientMessage.version)
}

// required .messages.ClientMessage.Type type = 2 [default = NOOP];
inline bool ClientMessage::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ClientMessage::has_type() const {
  return _internal_has_type();
}
inline void ClientMessage::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::messages::ClientMessage_Type ClientMessage::_internal_type() const {
  return static_cast< ::messages::ClientMessage_Type >(type_);
}
inline ::messages::ClientMessage_Type ClientMessage::type() const {
  // @@protoc_insertion_point(field_get:messages.ClientMessage.type)
  return _internal_type();
}
inline void ClientMessage::_internal_set_type(::messages::ClientMessage_Type value) {
  assert(::messages::ClientMessage_Type_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  type_ = value;
}
inline void ClientMessage::set_type(::messages::ClientMessage_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:messages.ClientMessage.type)
}

// optional string path = 3;
inline bool ClientMessage::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientMessage::has_path() const {
  return _internal_has_path();
}
inline void ClientMessage::clear_path() {
  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientMessage::path() const {
  // @@protoc_insertion_point(field_get:messages.ClientMessage.path)
  return _internal_path();
}
inline void ClientMessage::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:messages.ClientMessage.path)
}
inline std::string* ClientMessage::mutable_path() {
  // @@protoc_insertion_point(field_mutable:messages.ClientMessage.path)
  return _internal_mutable_path();
}
inline const std::string& ClientMessage::_internal_path() const {
  return path_.Get();
}
inline void ClientMessage::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ClientMessage::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:messages.ClientMessage.path)
}
inline void ClientMessage::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:messages.ClientMessage.path)
}
inline void ClientMessage::set_path(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:messages.ClientMessage.path)
}
inline std::string* ClientMessage::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ClientMessage::release_path() {
  // @@protoc_insertion_point(field_release:messages.ClientMessage.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClientMessage::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:messages.ClientMessage.path)
}

// optional uint64 fileSize = 4;
inline bool ClientMessage::_internal_has_filesize() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ClientMessage::has_filesize() const {
  return _internal_has_filesize();
}
inline void ClientMessage::clear_filesize() {
  filesize_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClientMessage::_internal_filesize() const {
  return filesize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClientMessage::filesize() const {
  // @@protoc_insertion_point(field_get:messages.ClientMessage.fileSize)
  return _internal_filesize();
}
inline void ClientMessage::_internal_set_filesize(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  filesize_ = value;
}
inline void ClientMessage::set_filesize(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_filesize(value);
  // @@protoc_insertion_point(field_set:messages.ClientMessage.fileSize)
}

// optional string lastWriteTime = 5;
inline bool ClientMessage::_internal_has_lastwritetime() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClientMessage::has_lastwritetime() const {
  return _internal_has_lastwritetime();
}
inline void ClientMessage::clear_lastwritetime() {
  lastwritetime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ClientMessage::lastwritetime() const {
  // @@protoc_insertion_point(field_get:messages.ClientMessage.lastWriteTime)
  return _internal_lastwritetime();
}
inline void ClientMessage::set_lastwritetime(const std::string& value) {
  _internal_set_lastwritetime(value);
  // @@protoc_insertion_point(field_set:messages.ClientMessage.lastWriteTime)
}
inline std::string* ClientMessage::mutable_lastwritetime() {
  // @@protoc_insertion_point(field_mutable:messages.ClientMessage.lastWriteTime)
  return _internal_mutable_lastwritetime();
}
inline const std::string& ClientMessage::_internal_lastwritetime() const {
  return lastwritetime_.Get();
}
inline void ClientMessage::_internal_set_lastwritetime(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  lastwritetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ClientMessage::set_lastwritetime(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  lastwritetime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:messages.ClientMessage.lastWriteTime)
}
inline void ClientMessage::set_lastwritetime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  lastwritetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:messages.ClientMessage.lastWriteTime)
}
inline void ClientMessage::set_lastwritetime(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  lastwritetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:messages.ClientMessage.lastWriteTime)
}
inline std::string* ClientMessage::_internal_mutable_lastwritetime() {
  _has_bits_[0] |= 0x00000002u;
  return lastwritetime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ClientMessage::release_lastwritetime() {
  // @@protoc_insertion_point(field_release:messages.ClientMessage.lastWriteTime)
  if (!_internal_has_lastwritetime()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return lastwritetime_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClientMessage::set_allocated_lastwritetime(std::string* lastwritetime) {
  if (lastwritetime != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  lastwritetime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lastwritetime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:messages.ClientMessage.lastWriteTime)
}

// optional bytes hash = 6;
inline bool ClientMessage::_internal_has_hash() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ClientMessage::has_hash() const {
  return _internal_has_hash();
}
inline void ClientMessage::clear_hash() {
  hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ClientMessage::hash() const {
  // @@protoc_insertion_point(field_get:messages.ClientMessage.hash)
  return _internal_hash();
}
inline void ClientMessage::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:messages.ClientMessage.hash)
}
inline std::string* ClientMessage::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:messages.ClientMessage.hash)
  return _internal_mutable_hash();
}
inline const std::string& ClientMessage::_internal_hash() const {
  return hash_.Get();
}
inline void ClientMessage::_internal_set_hash(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ClientMessage::set_hash(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:messages.ClientMessage.hash)
}
inline void ClientMessage::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:messages.ClientMessage.hash)
}
inline void ClientMessage::set_hash(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:messages.ClientMessage.hash)
}
inline std::string* ClientMessage::_internal_mutable_hash() {
  _has_bits_[0] |= 0x00000004u;
  return hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ClientMessage::release_hash() {
  // @@protoc_insertion_point(field_release:messages.ClientMessage.hash)
  if (!_internal_has_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return hash_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClientMessage::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:messages.ClientMessage.hash)
}

// optional string username = 7;
inline bool ClientMessage::_internal_has_username() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ClientMessage::has_username() const {
  return _internal_has_username();
}
inline void ClientMessage::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ClientMessage::username() const {
  // @@protoc_insertion_point(field_get:messages.ClientMessage.username)
  return _internal_username();
}
inline void ClientMessage::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:messages.ClientMessage.username)
}
inline std::string* ClientMessage::mutable_username() {
  // @@protoc_insertion_point(field_mutable:messages.ClientMessage.username)
  return _internal_mutable_username();
}
inline const std::string& ClientMessage::_internal_username() const {
  return username_.Get();
}
inline void ClientMessage::_internal_set_username(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ClientMessage::set_username(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:messages.ClientMessage.username)
}
inline void ClientMessage::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:messages.ClientMessage.username)
}
inline void ClientMessage::set_username(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:messages.ClientMessage.username)
}
inline std::string* ClientMessage::_internal_mutable_username() {
  _has_bits_[0] |= 0x00000008u;
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ClientMessage::release_username() {
  // @@protoc_insertion_point(field_release:messages.ClientMessage.username)
  if (!_internal_has_username()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return username_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClientMessage::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:messages.ClientMessage.username)
}

// optional bytes hashedPassword = 8;
inline bool ClientMessage::_internal_has_hashedpassword() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ClientMessage::has_hashedpassword() const {
  return _internal_has_hashedpassword();
}
inline void ClientMessage::clear_hashedpassword() {
  hashedpassword_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& ClientMessage::hashedpassword() const {
  // @@protoc_insertion_point(field_get:messages.ClientMessage.hashedPassword)
  return _internal_hashedpassword();
}
inline void ClientMessage::set_hashedpassword(const std::string& value) {
  _internal_set_hashedpassword(value);
  // @@protoc_insertion_point(field_set:messages.ClientMessage.hashedPassword)
}
inline std::string* ClientMessage::mutable_hashedpassword() {
  // @@protoc_insertion_point(field_mutable:messages.ClientMessage.hashedPassword)
  return _internal_mutable_hashedpassword();
}
inline const std::string& ClientMessage::_internal_hashedpassword() const {
  return hashedpassword_.Get();
}
inline void ClientMessage::_internal_set_hashedpassword(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  hashedpassword_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ClientMessage::set_hashedpassword(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  hashedpassword_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:messages.ClientMessage.hashedPassword)
}
inline void ClientMessage::set_hashedpassword(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  hashedpassword_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:messages.ClientMessage.hashedPassword)
}
inline void ClientMessage::set_hashedpassword(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  hashedpassword_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:messages.ClientMessage.hashedPassword)
}
inline std::string* ClientMessage::_internal_mutable_hashedpassword() {
  _has_bits_[0] |= 0x00000010u;
  return hashedpassword_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ClientMessage::release_hashedpassword() {
  // @@protoc_insertion_point(field_release:messages.ClientMessage.hashedPassword)
  if (!_internal_has_hashedpassword()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return hashedpassword_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClientMessage::set_allocated_hashedpassword(std::string* hashedpassword) {
  if (hashedpassword != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  hashedpassword_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hashedpassword,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:messages.ClientMessage.hashedPassword)
}

// -------------------------------------------------------------------

// ServerMessage

// required int32 version = 1;
inline bool ServerMessage::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ServerMessage::has_version() const {
  return _internal_has_version();
}
inline void ServerMessage::clear_version() {
  version_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerMessage::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerMessage::version() const {
  // @@protoc_insertion_point(field_get:messages.ServerMessage.version)
  return _internal_version();
}
inline void ServerMessage::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  version_ = value;
}
inline void ServerMessage::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:messages.ServerMessage.version)
}

// required .messages.ServerMessage.Type type = 2 [default = NOOP];
inline bool ServerMessage::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ServerMessage::has_type() const {
  return _internal_has_type();
}
inline void ServerMessage::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::messages::ServerMessage_Type ServerMessage::_internal_type() const {
  return static_cast< ::messages::ServerMessage_Type >(type_);
}
inline ::messages::ServerMessage_Type ServerMessage::type() const {
  // @@protoc_insertion_point(field_get:messages.ServerMessage.type)
  return _internal_type();
}
inline void ServerMessage::_internal_set_type(::messages::ServerMessage_Type value) {
  assert(::messages::ServerMessage_Type_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void ServerMessage::set_type(::messages::ServerMessage_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:messages.ServerMessage.type)
}

// optional int32 errcode = 3;
inline bool ServerMessage::_internal_has_errcode() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ServerMessage::has_errcode() const {
  return _internal_has_errcode();
}
inline void ServerMessage::clear_errcode() {
  errcode_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerMessage::_internal_errcode() const {
  return errcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerMessage::errcode() const {
  // @@protoc_insertion_point(field_get:messages.ServerMessage.errcode)
  return _internal_errcode();
}
inline void ServerMessage::_internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  errcode_ = value;
}
inline void ServerMessage::set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:messages.ServerMessage.errcode)
}

// optional bytes salt = 4;
inline bool ServerMessage::_internal_has_salt() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ServerMessage::has_salt() const {
  return _internal_has_salt();
}
inline void ServerMessage::clear_salt() {
  salt_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ServerMessage::salt() const {
  // @@protoc_insertion_point(field_get:messages.ServerMessage.salt)
  return _internal_salt();
}
inline void ServerMessage::set_salt(const std::string& value) {
  _internal_set_salt(value);
  // @@protoc_insertion_point(field_set:messages.ServerMessage.salt)
}
inline std::string* ServerMessage::mutable_salt() {
  // @@protoc_insertion_point(field_mutable:messages.ServerMessage.salt)
  return _internal_mutable_salt();
}
inline const std::string& ServerMessage::_internal_salt() const {
  return salt_.Get();
}
inline void ServerMessage::_internal_set_salt(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  salt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ServerMessage::set_salt(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  salt_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:messages.ServerMessage.salt)
}
inline void ServerMessage::set_salt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  salt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:messages.ServerMessage.salt)
}
inline void ServerMessage::set_salt(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  salt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:messages.ServerMessage.salt)
}
inline std::string* ServerMessage::_internal_mutable_salt() {
  _has_bits_[0] |= 0x00000001u;
  return salt_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ServerMessage::release_salt() {
  // @@protoc_insertion_point(field_release:messages.ServerMessage.salt)
  if (!_internal_has_salt()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return salt_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerMessage::set_allocated_salt(std::string* salt) {
  if (salt != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  salt_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), salt,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:messages.ServerMessage.salt)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::messages::ClientMessage_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::messages::ClientMessage_Type>() {
  return ::messages::ClientMessage_Type_descriptor();
}
template <> struct is_proto_enum< ::messages::ServerMessage_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::messages::ServerMessage_Type>() {
  return ::messages::ServerMessage_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
